{
    "collab_server" : "",
    "contents" : "###############################################\n# Auditoría de variables modelo predictivo NH #      \n###############################################\n# Custom dimensions                           #\n###############################################\nlibrary(\"dplyr\")\nlibrary(\"googlesheets\")\nsource(\"func_categoricas.R\")\nsource(\"func_cuantitativas.R\")\nsource(\"func_booleanas.R\")\nsource(\"funcs.R\")\n\n####### Autentificamos con la hoja de Drive #################\n\n# Nos identificamos en la cuenta de Drive\n\ngs_auth()\nsheet<- gs_title(\"Variables Modelo Predictivo NH\")\n\n############################ CUSTOM DIMENSIONs ##################################\ntable <- data.frame(gs_read(sheet,ws = \"CustomDimension\"))\ntable <- data.frame(table[1:130,1:4])\n\n# Dividimos las variables en tres tipos:\ntable_cuan <- subset(table,table$Tipo == 'Cuantitativa')\ntable_cual <- subset(table,table$Tipo == 'Cualitativa')\ntable_bool <- subset(table,table$Tipo == 'Booleana')\ntable_cuan_t <- subset(table,table$Tipo == 'Cuantitativa T')\ntipo <- \"cd\"\n\n######################## Empezamos con las variables de tipo cualitativas. #####################################\n# Ejecucion de las queries de forma paralela\ninicializacion_variables()\nfor(j in 1:NROW(cadenas_cual)){\n  print(paste0(\"Query-\",cadenas_cual[j]))\n  system.time(\n    output_query <- foreach(i = 1:NROW(table_cual), .packages = \"bigrquery\")%dopar%{\n      variable_beauty <- paste(\"Variable\",table_cual[i,3],sep = \" \")\n      variable <- paste0(\"hits.customDimensions.index=\",table_cual[i,3])\n      tabla_1 <- ejec_query(variable,tipo,cadenas_cual[j])\n      tabla_1\n    }\n  )\n  ############# Asignacion de variables ############\n  asignacion_variables(cadenas_cual[j],output_query)\n}\nstopCluster(cl)\nfor (i in 1:NROW(table_cual)){\n  variable <- paste0(\"hits.customDimensions.index=\",table_cual[i,3])\n  variable_beauty <- paste(\"Custom dimension\",table_cual[i,3],sep = \" \")\n  tabla_hist <-data.frame(histograma[i])\n  variables_top <- data.frame(top_n(tabla_hist,10,cuenta))\n  tabla_evol <- data.frame(evolutivo[i])\n  previews <- data.frame(preview[i]) \n  \n  tabla_general <- t(data.frame(general[i]))\n  tabla_general_percent <- t(data.frame(general_percent[i]))\n  tabla_cookie <- t(data.frame(cookie[i]))\n  tabla_cookie_percent <- t(data.frame(cookie_percent[i]))\n  tabla_date <- t(data.frame(date_table[i]))\n  tabla_date_percent <- t(data.frame(date_percent[i]))\n  \n  #Tabla inicial de variables\n  var_table_gen    <- rbind(tabla_general,tabla_general_percent)\n  var_table_cookie <- rbind(tabla_cookie,tabla_cookie_percent)\n  var_table_date  <- rbind(tabla_date,tabla_date_percent)\n  var_table_h <- cbind(var_table_gen,var_table_cookie,var_table_date)\n  \n  rownames(var_table_h) <- c(paste(\"Máximo\",variable_beauty,sep =\" \"),paste(\"Mínimo\",variable_beauty,sep =\" \"),paste(\"Promedio\",variable_beauty,sep =\" \"),\"Percentil 25\",\"Percentil 50\",\"Percentil 75\")\n  colnames(var_table_h) <- c(\"Valores cookie y fecha\",\"Valores por cookie\",\"Valores por fecha\")\n  kable(var_table_h, format = \"markdown\")\n  \n  #Gráfica de la evolución de la variable\n  \n  colnames(tabla_evol) <- c(\"date\",\"variable\");\n  \n  tabla_evol$dia <- as.integer(substr(tabla_evol$date,7,8));\n  tabla_evol$annomes <- as.factor(as.integer(substr(tabla_evol$date,0,6)));\n  \n  gr_evol <- ggplot(tabla_evol,aes(x = dia,y = variable)) \n  gr_evol + geom_line(colour=\"#003A70\",size=0.8) + facet_wrap(~annomes) + xlab(\"Día del mes\") + ylab(\"Frecuencia de la variable\") + ggtitle(\"Evolución de la variable en función del día\")\n  \n  ## Histograma\n  vector_top <- variables_top$cuenta\n  gr_evol_hist <- ggplot(variables_top,aes(x = cd, y = cuenta))\n  gr_evol_hist + geom_area(colour=\"#003A70\",fill=\"#003A70\",aes(x=reorder(cd,-cuenta), y=cuenta),size=5) + xlab(paste(\"Valores de\",variable_beauty,sep = \" \")) + ylab(paste(\"Número de veces\",variable_beauty,sep= \" \")) + ggtitle(paste(\"Histograma de la variable\",variable_beauty,sep= \" \")) + scale_x_discrete(labels=abbreviate)\n  \n  # Preview de variables\n  kable(previews, format = \"markdown\")\n  \n  input <- paste(\"entregableNH_categorica.Rmd\")\n  output <- paste0(\"htmls/Categoricas/variable_\",table_cual[i,3],\".html\")\n  rmarkdown::render(input = input, output_file = output)\n}\n\n####################### Seguimos con las variables cuantitativas. #######################################\n# Ejecucion de las queries de forma paralela\ninicializacion_variables()\nfor(j in 1:NROW(cadenas_cuan)){\n  print(paste0(\"Query-\",cadenas_cuan[j]))\n  system.time(\n    output_query <- foreach(i = 1:NROW(table_cuan), .packages = \"bigrquery\")%dopar%{\n      variable_beauty <- paste(\"Variable\",table_cuan[i,3],sep = \" \")\n      variable <- paste0(\"hits.customDimensions.index=\",table_cuan[i,3])\n      tabla_1 <- ejec_query(variable,tipo,cadenas_cuan[j])\n      tabla_1\n    }\n  )\n  ############# Asignacion de variables ############\n  asignacion_variables(cadenas_cuan[j],output_query)\n}\nstopCluster(cl)\nfor (i in 18:NROW(table_cuan)){\n   #Saltarse cinco variables que falla la creación del informe ya que los campos obtenidos son Null debido a que al caster no se converte a integer correctamente\n  if((i==9)||(i==10)||(i==15)||(i==16)||(i==17)){i<-i+1}\n  variable <- paste0(\"hits.customDimensions.index=\",table_cuan[i,3])\n  variable_beauty <- paste(\"Custom dimension\",table_cuan[i,3],sep = \" \")\n\n  # Asignacion de  variables\n  var_table_20_q <- data.frame(preview[i])\n  tabla_evol_q <- data.frame(evolutivo[i])\n  data_evol_q <- data.frame(tabla_evol_q)\n  data_evol_q <- data_evol_q %>% mutate(cd_avg = mean(cd))\n  tabla_hist_q <- data.frame(histograma[i])\n  \n  datos_general_q <- t(data.frame(general[i]))\n  datos_general_qpercent <- t(data.frame(general_percent[i]))\n  datos_cookie_q <- t(data.frame(cookie[i]))\n  datos_cookie_qpercent <- t(data.frame(cookie_percent[i]))\n  datos_date_q <- t(data.frame(date_table[i]))\n  datos_date_qpercent <- t(data.frame(date_percent[i]))\n  \n  \n  var_table_general_q    <- rbind(datos_general_q,datos_general_qpercent)\n  var_table_cookie_q <- rbind(datos_cookie_q,datos_cookie_qpercent)\n  var_table_date_q  <- rbind(datos_date_q,datos_date_qpercent)\n  var_table_q <- cbind(var_table_general_q,var_table_cookie_q,var_table_date_q)\n  rownames(var_table_q) <- c(\"Máximo\", \"Mínimo\", \"Promedio\",\"Percentil 25\",\"Percentil 50\",\"Percentil 75\")\n  colnames(var_table_q) <- c(\"Valores cookie y fecha\", \"Valores por cookie\", \"Valores por fecha\")\n  \n  kable(var_table_q, format = \"markdown\")\n  kable(var_table_20_q, format = \"markdown\")\n  \n  #Gráfica de la evolución de la variable\n  \n  #tabla_evol_q <- rbind(data_evol_ago,data_evol_sep,data_evol_oct,data_evol_nov,data_evol_dic,data_evol_ene)\n  tabla_evol_q <- data_evol_q\n  colnames(tabla_evol_q) <- c(\"date\",\"cd\",\"cd_avg\");\n  tabla_evol_q$dia <- as.integer(substr(tabla_evol_q$date,7,8))\n  tabla_evol_q$annomes <- as.factor(as.integer(substr(tabla_evol_q$date,0,6)))\n  \n  \n  gr_evol <- ggplot(tabla_evol_q,aes(x = dia, y = cd))\n  gr_evol + geom_hline(data=tabla_evol_q, aes(yintercept=cd_avg), colour=\"red\",size=0.4) +  facet_wrap(~annomes) + geom_line(colour=\"#003A70\",size=0.8) + facet_wrap(~annomes) + xlab(\"Día del mes\") + ylab(variable_beauty) + ggtitle(paste(\"Evolución de\",variable_beauty,\"en función del mes\",sep=\" \"))\n  \n  ## Histograma\n  \n  gr_evol_hist <- ggplot(tabla_hist_q,aes(x = cd))\n  gr_evol_hist + geom_area(colour=\"#003A70\",fill=\"#003A70\",aes(x=reorder(cd,-cuenta), y=cuenta),size=5) + xlab(paste(\"Valores de\",variable_beauty,sep = \" \")) + ylab(paste(\"Número de veces\",variable_beauty,sep= \" \")) + ggtitle(paste(\"Histograma de la variable\",variable_beauty,sep= \" \")) + scale_x_discrete(labels=abbreviate)\n  \n  input <- paste(\"entregableNH_cuanti.Rmd\")\n  output <- paste0(\"htmls/Cuantitativas/variable_\",table_cuan[i,3],\".html\")\n  rmarkdown::render(input = input, output_file = output)\n}\n\n####################### Seguimos con las variables booleanas. #################################\n# Ejecucion de las queries de forma paralela\ninicializacion_variables()\nfor(j in 1:NROW(cadenas_bool)){\n  print(paste0(\"Query-\",cadenas_bool[j]))\n  system.time(\n    output_query <- foreach(i = 1:NROW(table_bool), .packages = \"bigrquery\")%dopar%{\n      variable_beauty <- paste(\"Variable\",table_bool[i,3],sep = \" \")\n      variable <- paste0(\"hits.customDimensions.index=\",table_bool[i,3])\n      tabla_1 <- ejec_query(variable,tipo,cadenas_bool[j])\n      tabla_1\n    }\n  )\n  ############# Asignacion de variables ############\n  asignacion_variables(cadenas_bool[j],output_query)\n}\nstopCluster(cl)\nfor (i in 1:NROW(table_bool)){\n  variable <- paste0(\"hits.customDimensions.index=\",table_bool[i,3])\n  variable_beauty <- paste(\"Custom dimension\",table_bool[i,3],sep = \" \")\n\n  # Asignamos variables.\n  evol_b <- data.frame(evolutivo[i])\n  tabla_generalb <- data.frame(general[i])\n  tabla_previewb <- data.frame(preview[i])\n  evol_b_total <- data.frame(generalb_total[i])\n  \n  #evol_b_total <- data.frame(5622447,2469400)\n  #colnames(evol_b_total) <- c(\"New Cookie\", \"Returning Cookie\")\n  colnames(tabla_generalb) <- c(\"Tipo de cookie\", \"Máximo\", \"Mínimo\", \"Promedio\")\n  tabla_generalb <- data.frame(tabla_generalb)\n  kable(tabla_generalb, format = \"markdown\")\n  colnames(tabla_previewb) <- c(\"fecha\", \"Cookie_id\",\"Frecuencia de la cd\")\n  tabla_previewb <- data.frame(tabla_previewb)\n  kable(tabla_previewb, format = \"markdown\")\n  colnames(evol_b_total) <- c(\"Valor de variable\",\"Veces que se repite\")\n  kable(evol_b_total)\n  \n  #Evolucion\n  colnames(evol_b) <- c(\"date\",\"b_cookie_state\",\"count_cookie\");\n  \n  evol_b$dia <- as.integer(substr(evol_b$date,7,8));\n  evol_b$annomes <- as.factor(as.integer(substr(evol_b$date,0,6)))\n  \n  evol_b_final <- data.frame(evol_b)\n  gr_evol <- ggplot(evol_b_final,aes(x = dia,y = count_cookie))\n  gr_evol +  geom_line(aes(group = b_cookie_state)) + facet_wrap(~annomes) + xlab(\"Día del mes\") + ylab(\"Número de cookies\") + ggtitle(\"Evolución tipo de cd booleano\")\n  \n  input <- paste(\"entregableNH_bool.Rmd\")\n  output <- paste0(\"htmls/Booleanas/variable_\",table_bool[i,3],\".html\")\n  rmarkdown::render(input = input, output_file = output)\n}\n",
    "created" : 1487002351223.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "33|31|45|0|\n47|30|93|0|\n98|31|110|0|\n112|31|163|0|\n168|31|180|0|\n182|30|216|0|\n",
    "hash" : "1697010136",
    "id" : "A86CCAA2",
    "lastKnownWriteTime" : 1487070515,
    "last_content_update" : 1487070515742,
    "path" : "~/Desktop/RMarkdown/markdown_cd.R",
    "project_path" : "markdown_cd.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}